package main

const (
	TplHeadMsg = `
// Code generated by Standard Library Router Generator; DO NOT EDIT"

//go:generate stdrouter
//+build !stdrouter

`
	TplPackage = `package {{ . }}
`
	TplImport = `import (
`
	TplClosingBracket = `)

`
	TplRouter = `type Router struct {}

func NewRouter() http.Handler {
	{{ . }} := &Router{}
	return {{ . }}
}

func (router *Router) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	handleBase(w, r, r.URL.Path)
}

`
	TplHandlerFunc = `func {{ .FuncName }}(w http.ResponseWriter, r *http.Request, p string{{ range .PathParams }}, {{ . }} string{{ end }}) {
`
	TplSeparatePath = `endpoint, {{ .Tail }} := SeparatePath({{ .Base }}, {{ .Num }})
`
	TplSwitch = `switch {{ . }} {
`
	TplCase = `case {{ . }}:
`
	TplDefault = `default:
`
	TplImpl = `{{ . }}
`
	TplClosingCurlyBraces = `}

`
	TplIf = `if {{ . }} {
`
	TplElse = `} else {
`

	TplSeparatePathFunc = `
func SeparatePath(p string, n int) (head, tail string) {
	p = path.Clean("/" + p)
	ps := strings.Split(p[1:], "/")
	if len(ps) < n {
		return p, ""
	}
	head = path.Clean("/" + strings.Join(ps[:n], "/"))
	tail = path.Clean("/" + strings.Join(ps[n:], "/"))
	return head, tail
}
`
)
